let threshold = 50;

// --- Helper function: extract lux value ---
function extractReading(payload) {
    let matches = payload.match(/([\d.]+)/);
    return matches ? parseFloat(matches[1]) : NaN;
}

// --- Helper function: check state change ---
function checkSunlight(reading, threshold, sunlightOn) {
    if (isNaN(reading)) {
        return { state: "invalid", message: `Invalid reading: ${reading}` };
    }

    if (reading > threshold && !sunlightOn) {
        return { state: "started", message: `â˜€ Sunlight started! Current reading: ${reading} lx (threshold: ${threshold} lx).` };
    } else if (reading <= threshold && sunlightOn) {
        return { state: "stopped", message: `ğŸŒ™ Sunlight stopped! Current reading: ${reading} lx (threshold: ${threshold} lx).` };
    } else {
        return { state: "nochange", message: null };
    }
}

// --- Main Execution ---
let reading = extractReading(msg.payload);
let sunlightOn = context.get("sunlightOn") || false;
let result = checkSunlight(reading, threshold, sunlightOn);

if (result.state === "invalid") {
    node.warn(result.message);
    return null;

} else if (result.state === "started") {
    context.set("sunlightOn", true);
    msg.topic = "Sunlight Started";
    msg.payload = result.message;
    return msg;

} else if (result.state === "stopped") {
    context.set("sunlightOn", false);
    msg.topic = "Sunlight Stopped";
    msg.payload = result.message;
    return msg;

} else {
    // No state change
    return null;
}
