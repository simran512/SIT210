let threshold = 50;

// Extract number from payload, e.g. "Light: 85.00 lx"
let matches = msg.payload.match(/([\d.]+)/);  
let reading = matches ? parseFloat(matches[1]) : NaN;

if (isNaN(reading)) {
    node.warn(`Invalid reading: ${msg.payload}`);
    return null;
}

// Get previous sunlight state (default false = no sunlight)
let sunlightOn = context.get("sunlightOn") || false;

if (reading > threshold && !sunlightOn) {
    // Sunlight has just started
    context.set("sunlightOn", true);
    msg.topic = "Sunlight Started";
    msg.payload = `â˜€ Sunlight started! Current reading: ${reading} lx (threshold: ${threshold} lx).`;
    return msg;

} else if (reading <= threshold && sunlightOn) {
    // Sunlight has just stopped
    context.set("sunlightOn", false);
    msg.topic = "Sunlight Stopped";
    msg.payload = `ðŸŒ™ Sunlight stopped! Current reading: ${reading} lx (threshold: ${threshold} lx).`;
    return msg;
} else {
    // No change in state â†’ do nothing
    return null;
}
